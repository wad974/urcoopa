import requests
import json
from xml.etree import ElementTree as ET
from datetime import datetime, timedelta
import xml.sax.saxutils as saxutils

import requests
import json
from xml.etree import ElementTree as ET
import xml.sax.saxutils as saxutils

def envoyer_commande_soap(commande_json, api_key):
    """
    Version avec debug complet pour identifier le probl√®me
    """
    url = "https://www.urcoopa.fr/ws_sicalait/awws/WS_Sicalait.awws"
    
    # Headers multiples √† tester
    headers_options = [
        # Option 1 : Headers basiques
        {
            'Content-Type': 'text/xml; charset=utf-8',
            'SOAPAction': '""'  # SOAPAction vide
        },
        # Option 2 : Headers avec SOAPAction sp√©cifique
        {
            'Content-Type': 'text/xml; charset=utf-8',
            'SOAPAction': 'urn:WS_Sicalait#Push_Commandes_Sicalait'
        },
        # Option 3 : Headers sans SOAPAction
        {
            'Content-Type': 'text/xml; charset=utf-8'
        },
        # Option 4 : Headers avec SOAPAction
        
        {
            'Content-Type': 'text/xml; charset=utf-8',
            'SOAPAction': 'urn:WS_Sicalait/Push_Commandes_Sicalait'
        }
    ]
    
    # Convertir la commande en JSON string
    jCommande_str = json.dumps(commande_json, ensure_ascii=False)
    
    print(f"[DEBUG] üîç API Key utilis√©e: {api_key}")
    print(f"[DEBUG] üîç Longueur API Key: {len(api_key)}")
    print(f"[DEBUG] üîç JSON √† envoyer: {jCommande_str}")
    
    # √âchapper pour XML
    jCommande_escaped = saxutils.escape(jCommande_str)
    
    # Tester diff√©rents formats de requ√™te SOAP
    soap_templates = [
        # Template 1 : Format standard
        f"""<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
                xmlns:urn="urn:WS_Sicalait">
    <soap:Body>
        <urn:Push_Commandes_Sicalait>
            <urn:xCleAPI>{api_key}</urn:xCleAPI>
            <urn:jCommande>{jCommande_escaped}</urn:jCommande>
        </urn:Push_Commandes_Sicalait>
    </soap:Body>
</soap:Envelope>""",
        
        # Template 2 : Sans namespace prefix
        f"""<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
    <soap:Body>
        <Push_Commandes_Sicalait xmlns="urn:WS_Sicalait">
            <xCleAPI>{api_key}</xCleAPI>
            <jCommande>{jCommande_escaped}</jCommande>
        </Push_Commandes_Sicalait>
    </soap:Body>
</soap:Envelope>""",
        
        # Template 3 : Format simple
        f"""<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
    <soap:Body>
        <Push_Commandes_Sicalait>
            <xCleAPI>{api_key}</xCleAPI>
            <jCommande>{jCommande_escaped}</jCommande>
        </Push_Commandes_Sicalait>
    </soap:Body>
</soap:Envelope>""",

        # Template 4 : Format attendu
        f"""<?xml version="1.0"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
    <soap:Body>
        <Push_Commandes_Sicalait xmlns="urn:WS_Sicalait">
            <xCleAPI>{api_key}</xCleAPI>
            <jCommande>{jCommande_escaped}</jCommande>
        </Push_Commandes_Sicalait>
    </soap:Body>
</soap:Envelope>"""
    ]
    
    # Tester chaque combinaison
    for i, soap_body in enumerate(soap_templates):
        for j, headers in enumerate(headers_options):
            print(f"\n[TEST] üß™ Test {i+1}.{j+1} - Template {i+1}, Headers {j+1}")
            print(f"[DEBUG] Headers: {headers}")
            
            try:
                response = requests.post(url, data=soap_body, headers=headers, timeout=30)
                
                print(f"[INFO] Status Code: {response.status_code}")
                
                if response.status_code == 200:
                    try:
                        root = ET.fromstring(response.text)
                        
                        # Chercher le r√©sultat
                        result_node = None
                        for elem in root.iter():
                            if 'Result' in elem.tag:
                                result_node = elem
                                break
                        
                        if result_node is not None:
                            result_text = result_node.text
                            print(f"[RESULT] üìã R√©ponse: {result_text}")
                            
                            if result_text != "Token API incorrect":
                                print(f"[SUCCESS] ‚úÖ Combinaison gagnante trouv√©e!")
                                print(f"[SUCCESS] Template: {i+1}, Headers: {j+1}")
                                return {"status": "success", "message": result_text, "template": i+1, "headers": j+1}
                        else:
                            print("[WARNING] ‚ö†Ô∏è Pas de r√©sultat dans la r√©ponse")
                            print(f"Response: {response.text}")
                            
                    except ET.ParseError as e:
                        print(f"[ERROR] ‚ùå Erreur parsing XML: {e}")
                        print(f"Response: {response.text}")
                else:
                    print(f"[ERROR] ‚ùå Status: {response.status_code}")
                    print(f"Response: {response.text}")
                    
            except Exception as e:
                print(f"[ERROR] ‚ùå Erreur requ√™te: {e}")
    
    return {"status": "all_failed", "message": "Toutes les combinaisons ont √©chou√©"}


def tester_api_directement(api_key):
    """
    Test simple avec une commande minimale pour v√©rifier l'API
    """
    commande_minimale = {
        "commande": [
            {
                "Societe": "UR",
                "Code_Client": "5010",
                "Numero_Commande": "TEST001",
                "Nom_Client": "Test",
                "Code_Adresse_Livraison": "01",
                "Commentaire": "",
                "Date_Livraison_Souhaitee": "20241215",
                "Num_Telephone": "",
                "Email": "",
                "Ligne_Commande": [
                    {
                        "Numero_ligne": 1,
                        "Code_Produit": "TEST",
                        "Libelle_Produit": "Test",
                        "Poids_Commande": 1
                    }
                ]
            }
        ]
    }
    
    print(f"[TEST] üß™ Test API avec commande minimale")
    return envoyer_commande_soap(commande_minimale, api_key)


def verifier_wsdl():
    """
    V√©rifier si le WSDL est accessible et r√©cup√©rer les informations
    """
    wsdl_url = "https://www.urcoopa.fr/ws_sicalait/awws/WS_Sicalait.awws?wsdl"
    
    try:
        response = requests.get(wsdl_url, timeout=10)
        if response.status_code == 200:
            print("[SUCCESS] ‚úÖ WSDL accessible")
            
            # Analyser le WSDL pour trouver les noms des m√©thodes et param√®tres
            try:
                root = ET.fromstring(response.text)
                print("[INFO] üìã Structure WSDL:")
                
                # Chercher les op√©rations
                for elem in root.iter():
                    if 'operation' in elem.tag.lower():
                        if 'name' in elem.attrib:
                            print(f"  - Op√©ration: {elem.attrib['name']}")
                    elif 'element' in elem.tag.lower():
                        if 'name' in elem.attrib:
                            print(f"  - √âl√©ment: {elem.attrib['name']}")
                            
            except ET.ParseError as e:
                print(f"[ERROR] ‚ùå Erreur parsing WSDL: {e}")
                
        else:
            print(f"[ERROR] ‚ùå WSDL non accessible: {response.status_code}")
            
    except Exception as e:
        print(f"[ERROR] ‚ùå Erreur acc√®s WSDL: {e}")


# Fonction principale de test
def diagnostiquer_probleme_api(api_key):
    """
    Lance tous les tests de diagnostic
    """
    print("=" * 50)
    print("üîç DIAGNOSTIC COMPLET API URCOOPA")
    print("=" * 50)
    
    # 1. V√©rifier le WSDL
    print("\n1. üì° V√©rification WSDL")
    verifier_wsdl()
    
    # 2. Test API
    print("\n2. üß™ Test API")
    result = tester_api_directement(api_key)
    
    print(f"\nüìä R√âSULTAT FINAL: {result}")
    
    return result


# Utilisation dans votre code principal:
# result = diagnostiquer_probleme_api("f1f3b6d5-113e-4cd1-943d-0f07d28000df")

'''
def envoyer_commande_soap(commande_json, api_key):
    """
    Envoie une commande via SOAP en utilisant requests
    """
    url = "https://www.urcoopa.fr/ws_sicalait/awws/WS_Sicalait.awws"
    headers = {
        'Content-Type': 'text/xml; charset=utf-8',
        'SOAPAction': 'urn:WS_Sicalait#Push_Commandes_Sicalait'  # Parfois n√©cessaire
    }
    
    # Convertir la commande en JSON string et √©chapper les caract√®res XML
    jCommande_str = json.dumps(commande_json, ensure_ascii=False)
    jCommande_escaped = saxutils.escape(jCommande_str)
    
    # Construire le body SOAP
    soap_body = f"""<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" 
                xmlns:urn="urn:WS_Sicalait">
    <soap:Body>
        <urn:Push_Commandes_Sicalait>
            <urn:xCleAPI>{api_key}</urn:xCleAPI>
            <urn:jCommande>{jCommande_escaped}</urn:jCommande>
        </urn:Push_Commandes_Sicalait>
    </soap:Body>
</soap:Envelope>"""
    
    try:
        print(f"[INFO] üì§ Envoi de la commande via SOAP...")
        
        response = requests.post(url, data=soap_body, headers=headers, timeout=30)
        
        print(f"[INFO] Status Code: {response.status_code}")
        print(f"[INFO] Response Headers: {response.headers}")
        
        if response.status_code == 200:
            # Parser la r√©ponse XML
            try:
                root = ET.fromstring(response.text)
                
                # Chercher le r√©sultat dans diff√©rents namespaces possibles
                result_node = root.find('.//Push_Commandes_SicalaitResult')
                if result_node is None:
                    result_node = root.find('.//{urn:WS_Sicalait}Push_Commandes_SicalaitResult')
                if result_node is None:
                    # Fallback - chercher n'importe quel √©l√©ment contenant "Result"
                    for elem in root.iter():
                        if 'Result' in elem.tag:
                            result_node = elem
                            break
                
                if result_node is not None:
                    result_text = result_node.text
                    print(f"[SUCCESS] ‚úÖ R√©ponse serveur Urcoopa: {result_text}")
                    
                    # Analyser le r√©sultat
                    if result_text and result_text.startswith('ERREUR'):
                        print(f"[ERROR] ‚ùå Erreur retourn√©e par Urcoopa: {result_text}")
                        return {"status": "error", "message": result_text}
                    else:
                        print("[SUCCESS] ‚úÖ Commande envoy√©e avec succ√®s")
                        return {"status": "success", "message": result_text}
                else:
                    print("[WARNING] ‚ö†Ô∏è Pas de r√©sultat clair dans la r√©ponse")
                    print("R√©ponse brute:", response.text)
                    return {"status": "unknown", "message": "Pas de r√©sultat clair", "raw_response": response.text}
                    
            except ET.ParseError as e:
                print(f"[ERROR] ‚ùå Erreur de parsing XML: {e}")
                print("R√©ponse brute:", response.text)
                return {"status": "parse_error", "message": str(e), "raw_response": response.text}
        else:
            print(f"[ERROR] ‚ùå Erreur HTTP {response.status_code}")
            print("Response:", response.text)
            return {"status": "http_error", "code": response.status_code, "message": response.text}
            
    except requests.exceptions.Timeout:
        print("[ERROR] ‚ùå Timeout de la requ√™te")
        return {"status": "timeout", "message": "Timeout de la requ√™te"}
    
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] ‚ùå Erreur de requ√™te: {e}")
        return {"status": "request_error", "message": str(e)}
    
    except Exception as e:
        print(f"[ERROR] ‚ùå Erreur g√©n√©rale: {e}")
        return {"status": "general_error", "message": str(e)}
        
'''